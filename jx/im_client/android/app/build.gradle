def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.0'
}

def dartEnvVars = [
        APP_NAME        : project.hasProperty('APP_NAME')
                ? APP_NAME
                : 'HeyProfile',
        APP_ID          : project.hasProperty('APP_ID')
                ? APP_ID
                : 'com.jiangxia.im',
        AES_SECRET : project.hasProperty('AES_SECRET')
                ? AES_SECRET
                : '',
        GEO_API_KEY     : project.hasProperty('GEO_API_KEY')
                ? GEO_API_KEY
                : '',
        OPEN_INSTALL_KEY: project.hasProperty('OPEN_INSTALL_KEY')
                ? OPEN_INSTALL_KEY
                : '',
        HCM_KEY: project.hasProperty('HCM_KEY')
                ? HCM_KEY
                : '',
        ASSERT_LIST: project.hasProperty('ASSERT_LIST')
                ? ASSERT_LIST
                : '',
];

apply plugin: 'com.android.application'

// 华为代理配置
apply plugin: 'com.huawei.agconnect'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 34
    ndkVersion "25.2.9519653"
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    useLibrary 'org.apache.http.legacy'
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        
        applicationId "${dartEnvVars.APP_ID}"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders = [
            OPENINSTALL_APPKEY: "${dartEnvVars.OPEN_INSTALL_KEY}",
        ]
        ndk {
//              App 只定位国内使用，可以只打包 armeabi-v7a 架构的 so 文件，；如果您的 App 希望上架 Google Play，可以打包 armeabi-v7a 和 arm64-v8a 两个架构的 so 文件。
             abiFilters "arm64-v8a"
//              abiFilters "armeabi-v7a"
//           abiFilters "armeabi-v7a", "arm64-v8a"
        //    abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "mips"
        }

        lintOptions {
            checkReleaseBuilds false
        }
        resValue "string", "app_name", dartEnvVars.APP_NAME
        resValue "string", "aes_secret", dartEnvVars.AES_SECRET
        resValue "string", "geo_api_key", dartEnvVars.GEO_API_KEY
        resValue "string", "open_install_key", dartEnvVars.OPEN_INSTALL_KEY
        resValue "string", "hcm_key", dartEnvVars.HCM_KEY
        resValue "string", "assert_list", dartEnvVars.ASSERT_LIST
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }

        profile {
            signingConfig signingConfigs.config
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.config
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        pickFirst 'lib/x86/libswscale.so'
        pickFirst 'lib/x86/libavcodec.so'
        pickFirst 'lib/x86_64/libavutil.so'
        pickFirst 'lib/x86_64/libswscale.so'
        pickFirst 'lib/x86_64/libavformat.so'
        pickFirst 'lib/armeabi-v7a/libswscale_neon.so'
        pickFirst 'lib/x86_64/libavcodec.so'
        pickFirst 'lib/x86/libffmpegkit.so'
        pickFirst 'lib/x86/libavfilter.so'
        pickFirst 'lib/x86/libswresample.so'
        pickFirst 'lib/arm64-v8a/libavcodec.so'
        pickFirst 'lib/x86_64/libffmpegkit_abidetect.so'
        pickFirst 'lib/armeabi-v7a/libavdevice_neon.so'
        pickFirst 'lib/armeabi-v7a/libavfilter_neon.so'
        pickFirst 'lib/armeabi-v7a/libavutil_neon.so'
        pickFirst 'lib/arm64-v8a/libavutil.so'
        pickFirst 'lib/arm64-v8a/libavformat.so'
        pickFirst 'lib/x86/libavformat.so'
        pickFirst 'lib/arm64-v8a/libffmpegkit_abidetect.so'
        pickFirst 'lib/x86_64/libavdevice.so'
        pickFirst 'lib/arm64-v8a/libavfilter.so'
        pickFirst 'lib/x86/libffmpegkit_abidetect.so'
        pickFirst 'lib/x86_64/libswresample.so'
        pickFirst 'lib/arm64-v8a/libswscale.so'
        pickFirst 'lib/armeabi-v7a/libswresample_neon.so'
        pickFirst 'lib/armeabi-v7a/libffmpegkit_abidetect.so'
        pickFirst 'lib/armeabi-v7a/libffmpegkit_armv7a_neon.so'
        pickFirst 'lib/x86/libavdevice.so'
        pickFirst 'lib/x86/libavutil.so'
        pickFirst 'lib/armeabi-v7a/libavformat_neon.so'
        pickFirst 'lib/armeabi-v7a/libavcodec_neon.so'
        pickFirst 'lib/x86_64/libavfilter.so'
        pickFirst 'lib/arm64-v8a/libswresample.so'
        pickFirst 'lib/arm64-v8a/libffmpegkit.so'
        pickFirst 'lib/x86_64/libffmpegkit.so'
        pickFirst 'lib/arm64-v8a/libavdevice.so'
        pickFirst 'lib/**/libc++_shared.so'

        exclude 'lib/armeabi-v7a/libagora_ai_echo_cancellation_extension.so'
        exclude 'lib/armeabi-v7a/libagora_ai_noise_suppression_extension.so'
        exclude 'lib/armeabi-v7a/libagora_face_detection_extension.so'
        //下面會用到螢幕分享故要註解掉
//        exclude 'lib/armeabi-v7a/libagora_screen_capture_extension.so'
        exclude 'lib/armeabi-v7a/libagora_audio_beauty_extension.so'
        exclude 'lib/armeabi-v7a/libagora_content_inspect_extension.so'
        exclude 'lib/armeabi-v7a/libagora_segmentation_extension.so'
        exclude 'lib/armeabi-v7a/libagora_drm_loader_extension.so'
        exclude 'lib/armeabi-v7a/libagora_spatial_audio_extension.so'
        exclude 'lib/armeabi-v7a/libagora_udrm3_extension.so'
        exclude 'lib/armeabi-v7a/libagora_clear_vision_extension.so'
        exclude 'lib/armeabi-v7a/libagora_video_quality_analyzer_extension.so'
        exclude 'lib/armeabi-v7a/libagora_video_decoder_extension.so'
        exclude 'lib/armeabi-v7a/libagora_video_encoder_extension.so'
        exclude 'lib/armeabi-v7a/libagora_video_quality_analyzer_extension.so'

        exclude 'lib/arm64-v8a/libagora_ai_echo_cancellation_extension.so'
        exclude 'lib/arm64-v8a/libagora_ai_noise_suppression_extension.so'
        exclude 'lib/arm64-v8a/libagora_face_detection_extension.so'
        //下面會用到螢幕分享故要註解掉
//        exclude 'lib/arm64-v8a/libagora_screen_capture_extension.so'
        exclude 'lib/arm64-v8a/libagora_audio_beauty_extension.so'
        exclude 'lib/arm64-v8a/libagora_content_inspect_extension.so'
        exclude 'lib/arm64-v8a/libagora_segmentation_extension.so'
        exclude 'lib/arm64-v8a/libagora_drm_loader_extension.so'
        exclude 'lib/arm64-v8a/libagora_spatial_audio_extension.so'
        exclude 'lib/arm64-v8a/libagora_udrm3_extension.so'
        exclude 'lib/arm64-v8a/libagora_clear_vision_extension.so'
        exclude 'lib/arm64-v8a/libagora_video_quality_analyzer_extension.so'
        exclude 'lib/arm64-v8a/libagora_video_decoder_extension.so'
        exclude 'lib/arm64-v8a/libagora_video_encoder_extension.so'
        exclude 'lib/arm64-v8a/libagora_video_quality_analyzer_extension.so'


        //    pickFirst 'lib/arm64-v8a/libapp.so'
//            pickFirst 'lib/armeabi-v7a/libflutter.so'
//        dex {
//            useLegacyPackaging true
//        }
//        jniLibs {
//            useLegacyPackaging true
//        }
//        multiDexEnabled true
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

allprojects {
    repositories {
        // 添加以下内容
        flatDir {
            dirs 'libs'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation('androidx.legacy:legacy-support-v4:1.0.0')
    implementation("androidx.multidex:multidex:2.0.1")
    implementation('androidx.annotation:annotation:1.2.0')
    implementation('androidx.cardview:cardview:1.0.0')
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'org.whispersystems:curve25519-android:0.5.0'
//    implementation 'com.ljx.rxhttp:rxhttp:2.3.5'
    implementation 'androidx.lifecycle:lifecycle-process:2.5.1'
//    annotationProcessor 'com.ljx.rxhttp:rxhttp-compiler:2.3.5'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.2'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'com.alibaba:fastjson:1.2.79'
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')

    implementation 'com.google.android.material:material:1.6.0'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'com.google.firebase:firebase-common-ktx:20.4.2'
    implementation 'com.google.firebase:firebase-messaging-ktx:23.3.0'
    implementation platform('com.google.firebase:firebase-bom:32.1.1')
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    implementation 'androidx.window:window:1.0.0'
    implementation 'androidx.window:window-java:1.0.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.huawei.agconnect:agconnect-core:1.9.1.301'
    implementation 'com.huawei.hms:push:6.11.0.300'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'

//    implementation("io.sentry:sentry-android:7.18.0")
}

